[core]
	excludesfile = /Users/llosimura/.gitignore_global
	pager = diff-so-fancy | less --tabs=4 -RFX
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path =
[user]
	name = Alfonso
	email = alfonso@turo.com
[color]
    branch = auto
    diff = auto
    status = auto
	ui = true
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[color "status"]
    added = yellow
    changed = green
    untracked = cyan
[alias]
    co = checkout
    chp = cherry-pick
    chpc = cherry-pick --continue
    chpa = cherry-pick --abort
    # Checkout a branch by its issue id
    coi= "!f(){ git branch -ra | grep -m 1 $1| xargs git co ;};f"
    brdi = "!f(){ git branch -ra | grep -m 1 $1| xargs git br -D ;};f"
    ci = commit
    cia = commit --amend
    cian = commit --amend --no-edit
    st = status
    br = branch
    rb = rebase
    rbc = rebase --continue
    rba = rebase --abort
    lg = "log --oneline -n"
    hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
    type = cat-file -t
    dump = cat-file -p
    dsf = "!f() { [ \"$GIT_PREFIX\" != \"\" ] && cd "$GIT_PREFIX"; git diff --color $@ | diff-so-fancy | less --tabs=4 -RFX; }; f"
    rom=reset --hard origin/master
    unstage = reset --
    pr = pull-request
    files = diff-tree --no-commit-id --name-only -r
    resolve-ours = "!grep -lr '<<<<<<<' $@ | xargs git checkout --ours"
    resolve-theirs = "!grep -lr '<<<<<<<' $@ | xargs git checkout --theirs"
    rh = reset HEAD .
    r1 = reset HEAD~
    wip = "!git add . && git ci -m WIP --no-verify"
    # Get the current branch name (not so useful in itself, but used in
    # other aliases)
    branch-name = "!git rev-parse --abbrev-ref HEAD"
    cob = "! f() { [[ -n $@ ]] && git co -b \"$@\" \"origin/$@\"; }; f"
    cor = "! f() { [[ -n $@ ]] && git co \"origin/$@\"; }; f"
    # Push the current branch to the remote "origin", and set it to track
    # the upstream branch
    publish = "!git push -u origin $(git branch-name)"
    pf = push -f
    frb = "!git fetch && git rb origin/master"
    frbi = "!git fetch && git rb -i origin/master"
    rbiom=rb -i origin/master
    # Delete the remote version of the current branch
    unpublish = "!git push origin :$(git branch-name)"
    # Delete a branch and recreate it from master â€” useful if you have, say,
    # a development branch and a master branch and they could conceivably go
    # out of sync
    recreate = "!f() { [[ -n $@ ]] && git checkout \"$@\" && git unpublish && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\" && git publish; }; f"

    # Fire up your difftool (e.g. Kaleidescope) with all the changes that
    # are on the current branch.
    code-review = difftool origin/master...

    # Given a merge commit, find the span of commits that exist(ed) on that
    # branch. Again, not so useful in itself, but used by other aliases.
    merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"

    # Find the commits that were introduced by a merge
    merge-log = "!git log `git merge-span .. $1`"
    # Show the changes that were introduced by a merge
    merge-diff = "!git diff `git merge-span ... $1`"
    # As above, but in your difftool
    merge-difftool = "!git difftool `git merge-span ... $1`"
    rebaseme = "!git ci -m \"rebase me\""
    # Interactively rebase all the commits on the current branch
    rebase-branch = "!git rebase -i `git merge-base master HEAD`"
    # Rebase the current branch into the first branch that matches the specified arg (g rbb 1234 will rebase the current branch on top of f/jira-123_some_desc)
    rbb = "!f() { git branch -ra | grep -m 1 $1 | xargs -o git rb -i; }; f"
    #
    # Working with files
    #

    # Unstage any files that have been added to the staging area
    unstage = reset HEAD
    # Show changes that have been staged
    diffc = diff --cached

    # Mark a file as "assume unchanged", which means that Git will treat it
    # as though there are no changes to it even if there are. Useful for
    # temporary changes to tracked files
    assume = update-index --assume-unchanged
    # Reverse the above
    unassume = update-index --no-assume-unchanged
    # Show the files that are currently assume-unchanged
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"

    # Checkout our version of a file and add it
    ours = "!f() { git checkout --ours $@ && git add $@; }; f"
    # Checkout their version of a file and add it
    theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

    # Delete any branches that have been merged into master
    # See also: https://gist.github.com/robmiller/5133264
    delete-merged-branches = "!git co master && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
    find = "!f(){ git branch -ra | grep $1; }; f"

    update-submodules = submodule update --init --recursive
[merge]
	conflictstyle = diff3
	tool = p4mergetool
[rerere]
	enabled = 1
[push]
	default = upstream
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
[mergetool "p4mergetool"]
	cmd = /Applications/p4merge.app/Contents/Resources/launchp4merge $PWD/$BASE $PWD/$REMOTE $PWD/$LOCAL $PWD/$MERGED
	trustExitCode = false
[mergetool]
	keepBackup = false
[rebase]
	autosquash = true
[diff]
	renameLimit = 3305
